// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*
  Modelos dise√±ados para:
  - currency a nivel de Project (USD, UF, etc.)
  - Unit con flag booleano "available" (no usamos "status")
  - Quote con relaci√≥n opcional a Receipt (quote.receipt)
  - Campos usados por los endpoints de bulk, mine y create
*/

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String               // ‚Üê usamos "password" (no passwordHash)
  role      String   @default("BROKER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  // Si luego quieres ligar a un 'broker' agrega: brokerId String? y relaci√≥n a User
  quotes    Quote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  currency    String   @default("USD")  // üëà Moneda a nivel proyecto
  units       Unit[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Unit {
  id         String   @id @default(cuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])

  code       String                // üëà usado por /api/units/bulk
  typology   String
  m2         Int
  bedrooms   Int
  bathrooms  Int
  floor      Int?
  price      Int
  available  Boolean  @default(true) // üëà usamos available (no status)

  quotes     Quote[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([projectId])
}

model Quote {
  id               String    @id @default(cuid())
  unitId           String
  unit             Unit      @relation(fields: [unitId], references: [id])
  clientId         String
  client           Client    @relation(fields: [clientId], references: [id])

  downPaymentPct   Int
  installments     Int
  installmentValue Int
  currency         String                  // üëà se fija con project.currency al crear

  // Relaci√≥n 1-1 opcional con Receipt (quote.receipt)
  receipt          Receipt?

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([unitId])
  @@index([clientId])
}

model Receipt {
  id        String   @id @default(cuid())
  quoteId   String   @unique
  quote     Quote    @relation(fields: [quoteId], references: [id])
  url       String
  createdAt DateTime @default(now())
}
