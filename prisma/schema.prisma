// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  BROKER
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(BROKER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Broker → Clients
  clients   Client[]
}

model Client {
  id        String   @id @default(cuid())
  // Usamos un solo "name" para simplificar el backend.
  name      String
  email     String?  @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación opcional: quién es su broker
  brokerId  String?
  broker    User?    @relation(fields: [brokerId], references: [id])

  quotes    Quote[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  currency    String   // UF, USD, CLP, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  units       Unit[]
}

model Unit {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])

  code      String
  typology  String
  m2        Int
  bedrooms  Int
  bathrooms Int
  price     Float?
  available Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quotes    Quote[]
}

model Quote {
  id               String   @id @default(cuid())
  number           String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relaciones
  unitId  String
  unit    Unit    @relation(fields: [unitId], references: [id])
  clientId String
  client   Client  @relation(fields: [clientId], references: [id])

  // Datos de negocio
  downPaymentPct    Float
  installments      Int
  installmentValue  Float
  currency          String

  // 1–1 con Receipt (sólo un lado define fields/references)
  receipt   Receipt?
}

model Receipt {
  id         String   @id @default(cuid())
  quoteId    String   @unique
  quote      Quote    @relation(fields: [quoteId], references: [id])
  url        String
  uploadedAt DateTime @default(now())
}
