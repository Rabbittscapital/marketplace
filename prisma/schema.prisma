generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// role: "ADMIN" | "BROKER"
// currency: "USD" | "UF"
// status: "AVAILABLE" | "RESERVED_PENDING" | "RESERVED_CONFIRMED" | "SOLD"

model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  passwordHash String
  role         String    @default("BROKER")
  quotes       Quote[]
  clients      Client[]
  createdAt    DateTime  @default(now())
}

model Project {
  id           String   @id @default(cuid())
  name         String
  coverUrl     String?
  address      String
  city         String
  country      String
  deliveryDate DateTime
  units        Unit[]
  createdAt    DateTime @default(now())
}

model Unit {
  id         String   @id @default(cuid())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  code       String
  typology   String
  m2         Int
  bedrooms   Int
  bathrooms  Int
  price      Int
  currency   String
  status     String    @default("AVAILABLE")
  quotes     Quote[]
  createdAt  DateTime  @default(now())
}

model Client {
  id         String   @id @default(cuid())
  firstName  String
  lastName   String
  email      String
  phone      String
  broker     User     @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  brokerId   String
  quotes     Quote[]
  createdAt  DateTime @default(now())

  @@index([brokerId])
  @@index([email])
}

model Quote {
  id                      String   @id @default(cuid())
  unit                    Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId                  String
  broker                  User     @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  brokerId                String
  client                  Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId                String
  downPaymentPct          Int
  installments            Int
  calculatedDownPayment   Int
  installmentValue        Int
  pdfUrl                  String?
  receipt                 Receipt?
  createdAt               DateTime @default(now())

  @@index([brokerId])
  @@index([clientId])
}

model Receipt {
  id         String   @id @default(cuid())
  quote      Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId    String   @unique
  fileName   String
  mimeType   String
  contentB64 String
  note       String?
  createdAt  DateTime @default(now())
}
