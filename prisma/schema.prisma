// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Debe comenzar con postgres:// o postgresql://
}

/*
 Mantengo strings en vez de enums para simplificar despliegues y cambios.
 Valores esperados en la app:
 - User.role:        "ADMIN" | "BROKER"
 - Project.currency: "USD" | "UF"
 - Unit.status:      "AVAILABLE" | "RESERVED_PENDING" | "RESERVED_CONFIRMED" | "SOLD"
*/

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  role         String   @default("BROKER")

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  clients      Client[]
  quotes       Quote[]  @relation("BrokerQuotes")

  @@index([role])
}

model Client {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?

  // Due침o del cliente (vendedor/broker)
  brokerId  String
  broker    User     @relation(fields: [brokerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quotes    Quote[]

  @@index([brokerId])
  @@index([email])
}

model Project {
  id        String   @id @default(cuid())
  name      String
  currency  String   // "USD" | "UF"
  address   String?
  city      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  units     Unit[]

  @@index([currency])
}

model Unit {
  id         String   @id @default(cuid())
  number     String   @unique
  typology   String
  price      Int
  available  Boolean  @default(true)
  status     String   @default("AVAILABLE") // usado en validaciones
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  quotes     Quote[]

  @@index([projectId])
  @@index([status])
  @@index([available])
}

model Quote {
  id               String   @id @default(cuid())

  unitId           String
  unit             Unit     @relation(fields: [unitId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  clientId         String
  client           Client   @relation(fields: [clientId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Broker (vendedor que cre칩 la cotizaci칩n)
  brokerId         String
  broker           User     @relation("BrokerQuotes", fields: [brokerId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Datos de la cotizaci칩n
  downPaymentPct   Int
  installments     Int
  installmentValue Int
  totalPrice       Int
  currency         String   // viene del proyecto de la unidad al momento de crear

  createdAt        DateTime @default(now())

  @@index([brokerId])
  @@index([clientId])
  @@index([unitId])
}
