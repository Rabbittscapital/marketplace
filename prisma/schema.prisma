// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BROKER
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  email     String   @unique
  password  String

  // Relación (opcional) con clientes que atiende este broker
  clients   Client[] @relation("BrokerClients")

  // Si más adelante quieres cotizaciones por broker directamente:
  // quotes    Quote[]  @relation("BrokerQuotes")
}

model Client {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // En algunos builds anteriores tenías firstName/lastName.
  // Aquí simplificamos a un solo `name`. Si quieres volver a separar,
  // agrega esos campos y ajusta tu API.
  name      String
  email     String?  @unique
  phone     String?

  // Broker opcional dueño del cliente
  brokerId  String?
  broker    User?    @relation("BrokerClients", fields: [brokerId], references: [id])

  quotes    Quote[]
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  name        String
  description String?

  // Moneda a nivel de proyecto (UF, USD, CLP, etc.)
  currency    String   @default("USD")

  units       Unit[]
}

model Unit {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])

  code       String
  typology   String
  m2         Int
  bedrooms   Int
  bathrooms  Int
  floor      Int?          // ← NUEVO (opcional)
  price      Int
  available  Boolean  @default(true)

  quotes     Quote[]
}

model Quote {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  number           String   @unique        // requerido por tus builds previos
  downPaymentPct   Float
  installments     Int
  installmentValue Float
  currency         String

  // Relaciones
  unitId  String
  unit    Unit     @relation(fields: [unitId], references: [id])

  clientId String
  client   Client  @relation(fields: [clientId], references: [id])

  // Relación 1–1 (opcional) con Receipt
  // OJO: En una relación 1–1, solo un lado lleva `fields`/`references`.
  receipt  Receipt?
}

model Receipt {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  uploadedAt DateTime @default(now())

  url        String

  // Parte dueña de la relación 1–1 con Quote
  quoteId    String   @unique
  quote      Quote    @relation(fields: [quoteId], references: [id])
}
